// console.log("HELLO WORLD"); //part 1

// var i;
// var sum = 0;
// for (i = 2; i < process.argv.length; i++) { 
//     sum += Number(process.argv[i]);
// }
// console.log(sum); //part 2

// var fs = require('fs');
// var inputFile = fs.readFileSync(process.argv[2]);
// var inputFileStr = inputFile.toString();
// var inputFileLines = inputFileStr.split("\n");
// var lineNum = inputFileLines.length -1;
// console.log(lineNum);  //part 3

// var fs = require('fs');
// var output = fs.readFile(process.argv[2], 'utf8', function(err, content){
//   console.log(content.split('\n').length - 1);
// }); //part 4

// var fs = require('fs');
// var path = require('path');
// var fileExtension = '.';
// var output = fs.readdir(process.argv[2], function callback(err, list){
//     fileExtension += process.argv[3];
//     for (var i = 0; i < list.length; i++) {
//         if (path.extname(list[i]) == fileExtension){
//             console.log(list[i]);
//         }
//     }
// }); //part 5

// var mymodule = require('./module.js'); 
// var extension = process.argv[3];
// var dir = process.argv[2];
// mymodule(dir, extension, function(err, list){
//     if(err){
//         return console.error('Error: ', err)
//     }
//     list.forEach(function (file) {
//         console.log(file)
// })
// });
// //part 6

// var http = require("http");
// var url = process.argv[2].toString();
// http.get(url, function(response){
//     response.setEncoding('utf8');
//     response.on("data", console.log);
//     response.on("error", console.error);
// }).on('error', console.error);
//part 7

// var bl = require('bl');
// var http = require("http");
// var url = process.argv[2].toString();
// http.get(url, function(response){
//     response.pipe(bl(function(err,data){
//         if(err){
//             return console.error(err);
//         }
//         data = data.toString();
//         console.log(data.length);
//         console.log(data);
//     }));
// });

//part 8

// var bl = require('bl');
// var http = require('http');
// var results = [];
// var count = 0;
// var urlArray = process.argv.slice(2);
// var urlNum = urlArray.length;
// function printResult(){
//     for(var i=0; i<urlNum; i++){
//         console.log(results[i]);
//     }
// }
// function httpGet(index){
//     http.get(urlArray[index], function(response){
//     response.pipe(bl(function(err,data){
//         if(err){
//             return console.error(err);
//         }
//         results[index] = data.toString();
//         count++;
//         if(count == urlNum){
//             printResult();
//         }
//     }));
//     });
//     }
// for(var i=0; i<urlNum; i++){
//     httpGet(i);
// }
//part 9

// var net = require('net');
// var portNumber = process.argv[2];
// var server = net.createServer(function (socket) {
//  socket.end(getFormattedDate() + '\n');
// });
// server.listen(portNumber);
// function getFormattedDate() {
//  var today = new Date();
//  return [ today.getFullYear(),
//  formatNumber(today.getMonth() + 1),
//  formatNumber(today.getDate()) ].join('-')
//  + ' ' +
//  [ formatNumber(today.getHours()),
//  formatNumber(today.getMinutes()) ].join(':');
// }
// function formatNumber(number) {
//  return number < 10 ? '0' + number : number;
// }
//part 10

// var fs = require('fs');
// var http = require('http');
// var portNumber = process.argv[2];
// var file = process.argv[3];
// http.createServer(function(req, res) {
//  res.writeHead(200, { 'content-type' : 'text/plain' });
//  fs.createReadStream(file).pipe(res);
// }).listen(portNumber);
//part 11

// var map = require('through2-map');
// var http = require('http');
// var portNumber = process.argv[2];
// http.createServer(function (req, res) {
//  if (req.method === 'POST') {
//  req.pipe(map(function (chunk) {
//  return chunk.toString().toUpperCase();
//  })).pipe(res);
//  }
// }).listen(portNumber);
//part 12

var http = require('http');
var url = require('url');
var portNumber = process.argv[2];
http.createServer(function (req, res) {
 var urlObject = url.parse(req.url, true),
 pathname = urlObject.pathname,
 startTime = urlObject.query.iso,
 result;
 if (pathname == '/api/unixtime') {
 result = getUnixTimeStamp(startTime);
 }
 else if (pathname == '/api/parsetime') {
 result = getTimeObj(startTime);
 }
 if (result) {
 res.writeHead(200, { 'Content-type': 'application/json' });
 res.end(JSON.stringify(result));
 }
 else {
 res.writeHead(404);
 res.end();
 }
}).listen(portNumber);
function getUnixTimeStamp(startTime) {
 return {
 unixtime: getTimeStamp(startTime)
 };
}
function getTimeStamp(startTime) {
 return Date.parse(startTime);
}
function getTimeObj(startTime) {
 var date = new Date(getTimeStamp(startTime));
return {
 hour: date.getHours(),
 minute: date.getMinutes(),
 second: date.getSeconds()
 };
}
//part 13